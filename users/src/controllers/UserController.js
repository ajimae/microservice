const { generateToken } = require('../utils');
const config = require('../config');
const BaseController = require('./BaseController');

class UserController extends BaseController {
  constructor(userRepository) {
    super();
    this.userRepository = userRepository;
  }

  async login(req, res) {
    const response = await this.userRepository.login(req.body);

    if (!response) {
      return this.responseManager
        .getResponseHandler(res)
        .onError('Invalid email or password', this.responseManager.HTTP_STATUS.BAD_REQUEST, response);
    }

    const data = response.toObject();
    const { _id, contact, isSuspended, role } = data;

    const url = `${config.authServiceUrl}/generate`;
    const userData = {
      id: _id,
      email: contact.email,
      username: contact.username,
      isSuspended,
      role
    }

    // make a call to user service
    const _data = await generateToken(url, userData, 'POST');

    // check to ensure token was generated by auth service
    if (_data?.['status'] != 'success') {
      return this.responseManager
        .getResponseHandler(res)
        .onError('Failed to generate authorization token', this.responseManager.HTTP_STATUS.INTERNAL_SERVER_ERROR);
    }

    delete data.password;

    // add token property to user object
    data.token = _data?.data?.token;

    // set token to header
    req.header('Authorization', `Bearer ${data.token}`);
    res.header('Authorization', `Bearer ${data.token}`);
    return this.responseManager
      .getResponseHandler(res)
      .onSuccess('Login successful', this.responseManager.HTTP_STATUS.OK, data);
  }

  async signup(req, res) {
    const response = await this.userRepository.signup(req.body);

    const data = response.toObject();
    const { _id, contact, isSuspended, role } = data;

    const url = `${config.authServiceUrl}/generate`;
    const userData = {
      id: _id,
      email: contact.email,
      username: contact.username,
      isSuspended,
      role
    }

    // make a call to user service
    const _data = await generateToken(url, userData, 'POST');

    // check to ensure token was generated by auth service
    if (_data?.['status'] != 'success') {
      return this.responseManager
        .getResponseHandler(res)
        .onError('Failed to generate authorization token', this.responseManager.HTTP_STATUS.INTERNAL_SERVER_ERROR);
    }

    // remove password from response object
    delete data.password;

    // add token property to user object
    data.token = _data?.data?.token;

    // set token to header
    req.header('Authorization', `Bearer ${data.token}`);
    res.header('Authorization', `Bearer ${data.token}`);
    return this.responseManager
      .getResponseHandler(res)
      .onSuccess('Signup successful', this.responseManager.HTTP_STATUS.CREATED, data);
  }

  async getUserData(req, res) {
    const data = await this.userRepository.getUserData(req.body);

    return this.responseManager
      .getResponseHandler(res)
      .onSuccess('Successfully fetch the user data', this.responseManager.HTTP_STATUS.OK, data);
  }

  async getUsersData(req, res) {
    const data = await this.userRepository.getUsersData();

    return this.responseManager
      .getResponseHandler(res)
      .onSuccess('Successfully fetch all users data', this.responseManager.HTTP_STATUS.OK, data);
  }

  async updateUserData(req, res) {
    const id = req.params.id;
    const userData = req.body;
    const data = await this.userRepository.updateUserData({ id, userData });

    return this.responseManager
      .getResponseHandler(res)
      .onSuccess('Successfully updated the user data', this.responseManager.HTTP_STATUS.OK, data);
  }

  async suspendUser(req, res) {
    const data = await this.userRepository.suspendUser(req.body);

    return this.responseManager
      .getResponseHandler(res)
      .onSuccess('Successfully updated the user data', this.responseManager.HTTP_STATUS.OK, data);
  }

  async removeUser(req, res) {
    const id = req.params.id;
    const data = await this.userRepository.removeUser(id);

    return this.responseManager
      .getResponseHandler(res)
      .onSuccess('Successfully removed the user data', this.responseManager.HTTP_STATUS.OK, data);
  }
}

module.exports = UserController;
